init $r0, 1		 #r0 = 1
init $r1, 2		 #r1 = 2
sw $r0, $r1		 #0x2 = 1 <= r0 
init $r0, 5		 #r0 = 5
init $r1, 3		 #r1 = 3
sw $r0, $r1		 #0x3 = 5, loop counter for sum
init $r0, 1		 #r0 = 1
lw $r0, $r0		 #r0 = 0x1
init $r1, 4	 	 #r1 = 4
add $r1, $r1		 #r1 = 8
sw $r0, $r1		 #0x8 = r0 = Q , loop counter for mod
init $r0, 0		 #r0 = 0
lw $r0, $r0		 #r0 = P
init $r1, 6		 #r1 = 6
sw $r0, $r1		 #0x6 = P, will be the loop counter
init $r0, 1		 #r0 = 0x1
lw $r0, $r0		 #r0 = Q
init $r1, 0		 #r1 = 0
sub $r1,$r0,$0	 #r1 - r0 = -Q = r0
init $r1, 7		 #r1 = 7
sw $r0, $r1		 #0x7 = -Q <= r0, The -Q counter
init $r0, 1		 #r0 = 1
init $r1, 5		 #r1 = 5
add $r1, $r1		 #r1 = 10
sw $r0, $r1		 #0x10 = 1, holds sum of numbers for sum loop ooooooooooooooooo 
init $r1, 6		 #r1 = 6 = end JUMP DISTANCE!!!!!!!!!!!!!! 97 !!! loop JUMP LOCATION !!!
add $r1, $r1	 #r1 = 12
add $r1, $r1	 #r1 = 24
add $r1, $r1	 #r1 = 48
add $r1, $r1	 #r1 = 96
init $r0, 1	    #r0 = 1
add $r0, $r1    #r1 = 97
init $r0, 6		 #r0 = 6
lw $r0, $r0		 #r0 = P <=0x6
bez $r1			 #imm will be the number to reach end 97
init $r1, 3		 #r1 = 3 !!! sum JUMP LOCATION !!!
lw $r0, $r1		 #r0 = value in 0x3
init $r1, 7		 #r1 = 7 = number to reach mod!!!!!!!!!!!!!!!! 28
add $r1, $r1	 #7 + 7 = 14
add $r1, $r1	 # 14 + 14 = 28
bez $r1			 #Jump for mod when 0x3 == 0  28
init $r1, 0		 # Buffer
init $r1, 0		 # Buffer
init $r1, 0		 # Buffer
init $r1, 5		 #r1 = 5
add $r1, $r1
lw $r1, $r1		 #r1 = value of 0x10
init $r0, 2		 #r0 = 2
lw $r0, $r0		 #r0 = value of 0x2
add $r1, $r0	 #r0 = r0 + r1
init $r1, 5		 #r1 = 5
add $r1, $r1
sw $r0, $r1		 #0x10 = r0
init $r1, 3		 #r1 to 3 address
lw $r1, $r1		 #r1 = value of 0x3 <=r1
init $r0, -1	 #r0 = -1
add $r1, $r0	 #r0 = r0 + r1
init $r1, 3		 #r1 = 3
sw $r0, $r1		 #0x3 = r0
init $r0, 4	 # 4 = sum JUMP DISTANCE!!!!!!!!!!! -32 
add $r0, $r0	 #r0 = 8
add $r0, $r0	 #r0 = 16
add $r0, $r0     #r0 = 32
init $r1, 0     #r1 = 0
sub $r1, $r0, $r1 #r1 = -32 
init $r0, 0		 #r0 = 0
init $r0, 0      #BUFFER
bez $r1			 #imm would be number to reach sum  DONE -32 
init $r1, 4		 #r1 = 4, !!! mod JUMP LOCATION !!!
add $r1, $r1		
init $r0, 5		 #r0 = 5
add $r0, $r0
lw $r1, $r1		 #r1 = value of 0x8
lw $r0, $r0		 #r0 = value of 0x10
slt $r0, $r1	 #r0 = r0<r1
init $r1, 2		 # 2 = smallj JUMP DISTANCE!!!!!!!!!!! 8
init $r1, 2        #BUFFER
init $r1, 2        #BUFFER
add $r1, $r1    #r1 = 4
add $r1, $r1       #r1 = 8
bez $r1			 #skip if r0 == 0
init $r1, 6		 # 6 = lower JUMP DISTANCE!!!!!!!!!!! 19
add $r1, $r1	 # 12
init $r0, 7     #r0 = 7
add $r0, $r1    #r1 = 19
init $r0, 0		 # r0 = 0
bez $r1			 #jump to lower 19
init $r0, 0		 #Buffer
init $r0, 7		 #r0 = 7, in order to reset r1 to 0 !!! smallj JUMP LOCATION !!!
init $r1, 5		 #r1 = 5
add $r1, $r1
lw $r1, $r1		 #r1 = value of 0x10
lw $r0, $r0		 #r0 = -17
add $r1, $r0	 #r0 = - 17 + r1
init $r1, 5		 #r1 = 5
add $r1, $r1
sw $r0, $r1		 #0x10 = r0
init $r0, -4		 # -4 = mod JUMP DISTANCE!!!!!!!!!!! -36
init $r1, -4
add $r0, $r1	 #r1 = -8
add $r1, $r1	 #r1 = -16
add $r1, $r1    #r1 = -32
add $r0, $r1    #r1 = -36
init $r0, 0		 #r0 = 0
bez $r1			 #imm is the number to reach mod -36
init $r0, 6		 #r0 = 6 !!! lower JUMP LOCATION !!!
init $r1, -1	 #r1 = -1
lw $r0, $r0		 #r0 = value of 0x6
add $r1, $r0	 #r0 = r0 - 1
init $r1, 6		 #r1 = 6
sw $r0, $r1		 #0x6 = r0
init $r0, 5		 #r0 = 5
init $r1, 3		 #r1 = 3
sw $r0, $r1		 #0x3 = r0
add $r0, $r0
lw $r0, $r0		 #r0 = value of 0x10
init $r1, 2		 #r1 = 2
sw $r0, $r1		 #0x2 = r0
init $r1, -5	 #r1 = -5 = loop JUMP DISTANCE!!!!!!!!!!! -105
add $r1, $r1	 #r1 = -5 - 5 = -10
add $r1, $r1	 #r1 = -10 - 10 = -20
add $r1, $r1	 #r1 = -20 - 20 = -40
add $r1, $r1	 #r1 = -40 - 40 = -80
init $r0, -6	 #r0 = -6
add $r0, $r0    #r0 = -12
add $r0, $r1    #r1 = -92
add $r0, $r1	 #r1 = -12 - 92 = -104 
init $r0, -1	#r0 = -1
add $r0, $r1     #r1 = -105
init $r0, 0     #r0 = 0
bez $r1			 #imm is number to reach loop
init $r0, 5		 #r0 = 5 !!! end JUMP LOCATION !!!
add $r0, $r0
lw $r0, $r0		 #r0 = value of 0x10
init $r1, 2		 #r1 = 2
sw $r0, $r1		 #0x2 = r0
init $r0, 0		 #r0 = 0 
init $r1, 0	 #r1 = 0, back 0 instructions to loop infinite
bez $r1			 #imm is the number to reach exit !!! exit JUMP LOCATION !!!
