init $r0, 1		 #r0 = 1
init $r1, 2		 #r1 = 2
sw $r0, $r1		 #0x2 = 1 <= r0
init $r1, 5		 #r1 = 5
sw $r1, $r0		 #holds sum of numbers for sum loop (r0 = 1 already)
init $r0, 5		 #r0 = 5
init $r1, 3		 #r1 = 3
sw $r0, $r1		 #0x3 = 5, loop counter for sum
init $r0, 1		 #r0 = 1
lw $r0, $r0		 #r0 = 0x1
init $r1, 4	 #r1 = 4
sw $r0, $r1		 #0x4 = r0 = Q , loop counter for mod
init $r0, 0		 #r0 = 0
lw $r0, $r0		 #r0 = P
init $r1, 6		 #r1 = 6
sw $r0, $r1		 #0x6 = P, will be the loop counter
init $r0, 0		 #r0 = 0
lw $r0, $r0		 #r0 = Q
init $r1, 0		 #r1 = 0
sub $r1,$r0,$0	 #r1 - r0 = -Q = r0
init $r1, 7		 #r1 = 7
sw $r0, $r1		 #0x7 = -17 <= r0, The -17 counter
init $r1, 7		 #r1 = 7 = end JUMP DISTANCE!!!!!!!!!!!!!! 78 !!! loop JUMP LOCATION !!!
add $r0, $r1	 #r1 = 5 + 5 = 10
add $r0, $r1	 #r1 = 10 + 10 = 20
add $r0, $r1	 #r1 = 20 + 20 = 40
add $r0, $r1	 #r1 = 40 + 40 = 80
init $r0, -2	 #r0 = -2
add $r0, $r0	 #r1 = 80 - 2 = 78 
init $r0, 6		 #r0 = 6
lw $r0, $r0		 #r0 = P <=0x6
bez $r1			 #imm will be the number to reach end 78
init $r1, 3		 #r1 = 3 !!! sum JUMP LOCATION !!!
lw $r0, $r1		 #r0 = value in 0x3
init $r1, 6		 #r1 = 6 = number to reach mod!!!!!!!!!!!!!!!!
add $r0, $r1	 #6 + 6 = 12
add $r0, $r1	 # 12 + 12 = 24
bez $r1			 #Jump for mod when 0x3 == 0
init $r1, 0		 # Buffer
init $r1, 0		 # Buffer
init $r1, 0		 # Buffer
init $r1, 5		 #r1 = 5
lw $r1, $r1		 #r1 = value of 0x5
init $r0, 2		 #r0 = 2
lw $r0, $r0		 #r0 = value of 0x2
add $r0, $r1	 #r0 = r0 + r1
init $r1, 5		 #r1 = 5
sw $r1, $r0		 #0x5 = r0
init $r1, 3		 #r1 to 3 address
lw $r1, $r1		 #r1 = value of 0x3 <=r1
init $r0, -1	 #r0 = -1
add $r0, $r1	 #r0 = r0 + r1
init $r1, 3		 #r1 = 3
sw $r0, $r1		 #0x3 = r0
init $r1, -5	 # -5 = sum JUMP DISTANCE!!!!!!!!!!! -28
add $r0, $r1	 #r1 = -5 - 5 = -10
add $r0, $r1	 #r1 = -10 - 10 = -20
init $r1, -8	 #r0 = -8
add $r0, $r0	 #r1= r0 + r1 = - 8 - 20
init $r0, 0		 #r0 = 0
bez $r1			 #imm would be number to reach sum  DONE -28
init $r0, 4		 #r0 = 4, r0 to 4 address !!! mod JUMP LOCATION !!!
init $r1, 5		 #r1 = 5
lw $r1, $r1		 #r1 = value of 0x5
lw $r0, $r0		 #r0 = value of 0x4
slt $r1, $r1	 #r0 = r1<r0
init $r1, 7		 # 7 = smallj JUMP DISTANCE!!!!!!!!!!! 7
bez $r1			 #skip if r0 == 0
init $r0, 0		 #r0 = 3
init $r1, 5		 # 6 = lower JUMP DISTANCE!!!!!!!!!!! 10
add $r0, $r1	 # 6+6=12
add $r0, $r0	 # r1 = 3 + 12
init $r0, 0		 # r0 = 0
bez $r1			 #jump to lower
init $r0, 7		 #r0 = 7, in order to reset r1 to 0 !!! smallj JUMP LOCATION !!!
init $r1, 5		 #r1 = 5
lw $r1, $r1		 #r1 = value of 0x5
lw $r0, $r0		 #r0 = -17
add $r0, $r1	 #r0 = - 17 + r1
init $r1, 5		 #r1 = 5
sw $r0, $r1		 #0x5 = r0
init $r1, 5		 # -5 = mod JUMP DISTANCE!!!!!!!!!!! -26
add $r0, $r1	 #r1 = -5 - 5 = -10
add $r0, $r1	 #r1 = -10 - 10 = -20
init $r0, -6	 #r0 = -6
add $r0, $r0	 #r1= r0 + r1 = -6 - 20
init $r0, 0		 #r0 = 0
bez $r1			 #imm is the number to reach mod
init $r0, 6		 #r0 = 6 !!! lower JUMP LOCATION !!!
init $r1, -1	 #r1 = -1
lw $r0, $r0		 #r0 = value of 0x6
add $r0, $r1	 #r0 = r0 - 1
init $r1, 6		 #r1 = 6
sw $r0, $r1		 #0x6 = r0
init $r0, 5		 #r0 = 5
init $r1, 3		 #r1 = 3
sw $r0, $r1		 #0x3 = r0
lw $r0, $r0		 #r0 = value of 0x5
init $r1, 2		 #r1 = 2
sw $r0, $r1		 #0x2 = r0
init $r1, -5	 #r1 = -5 = loop JUMP DISTANCE!!!!!!!!!!! -86
add $r0, $r1	 #r1 = -5 - 5 = -10
add $r0, $r1	 #r1 = -10 - 10 = -20
add $r0, $r1	 #r1 = -20 - 20 = -40
add $r0, $r1	 #r1 = -40 - 40 = -80
init $r0, -6	 #r0 = -6
add $r0, $r0	 #r1 = -80 - 6 = -86 
init $r0, 0		 #r0 = 0
bez $r1			 #imm is number to reach loop
init $r0, 5		 #r0 = 5 !!! end JUMP LOCATION !!!
lw $r0, $r0		 #r0 = value of 0x5
init $r1, 2		 #r1 = 2
sw $r0, $r1		 #0x2 = r0
init $r0, 0		 #r0 = 0 !!! exit JUMP LOCATION !!!
init $r1, -2	 #r1 = -2, back -2 instructions to loop infinite
bez $r1			 #imm is the number to reach exit
